# 3.1: target_sources

cmake_minimum_required(VERSION 3.15)
project("dotnet-icu" LANGUAGES CXX ASM ASM_MASM C)

set(icu-source-path "${CMAKE_CURRENT_LIST_DIR}/../icu/icu4c/source")
message(WARNING "icu-source-path = ${icu-source-path}")

add_compile_definitions(
    #"UCONFIG_ONLY_COLLATION=1"
    #"UCONFIG_NO_LEGACY_CONVERSION=1"
    #"UCONFIG_NO_BREAK_ITERATION=0"
    )

function(handle_debuginfo targetname)
    if(APPLE)
        if(NOT CMAKE_STRIP)
            set(CMAKE_STRIP xcrun strip)
        endif()
        if(NOT CMAKE_DSYMUTIL)
            set(CMAKE_DSYMUTIL xcrun dsymutil)
        endif()
        add_custom_command(TARGET "${targetname}" POST_BUILD
            COMMAND ${CMAKE_DSYMUTIL} -o=$<TARGET_FILE_NAME:${targetname}>.dSYM $<TARGET_FILE:${targetname}>
            COMMAND ${CMAKE_STRIP} $<TARGET_FILE:${targetname}>)
    else()
        add_custom_command(TARGET "${targetname}" POST_BUILD
            COMMAND ${CMAKE_OBJCOPY} --only-keep-debug $<TARGET_FILE:${targetname}> $<TARGET_FILE:${targetname}>.dbg
            COMMAND ${CMAKE_OBJCOPY} --strip-all $<TARGET_FILE:${targetname}>
            COMMAND ${CMAKE_OBJCOPY} --add-gnu-debuglink $<TARGET_FILE:${targetname}>.dbg $<TARGET_FILE:${targetname}>)
    endif()
endfunction()

function(_dnicu_pfx_files dstvar prefix)
    set(files ${ARGN})
    list(TRANSFORM files PREPEND "${prefix}/")
    set(${dstvar} ${files} PARENT_SCOPE)
endfunction()

function(_def_icuuc)
    set(targetname "icuuc")
    add_library("${targetname}")
    _dnicu_pfx_files(common-files "${icu-source-path}/common"
        "errorcode.cpp"
        "putil.cpp"
        "umath.cpp"
        "utypes.cpp"
        "uinvchar.cpp"
        "umutex.cpp"
        "ucln_cmn.cpp"
        "uinit.cpp"
        "uobject.cpp"
        "cmemory.cpp"
        "charstr.cpp"
        "cstr.cpp"
        "udata.cpp"
        "ucmndata.cpp"
        "udatamem.cpp"
        "umapfile.cpp"
        "udataswp.cpp"
        "utrie_swap.cpp"
        "ucol_swp.cpp"
        "utrace.cpp"
        "uhash.cpp"
        "uhash_us.cpp"
        "uenum.cpp"
        "ustrenum.cpp"
        "uvector.cpp"
        "ustack.cpp"
        "uvectr32.cpp"
        "uvectr64.cpp"
        "ucnv.cpp"
        "ucnv_bld.cpp"
        "ucnv_cnv.cpp"
        "ucnv_io.cpp"
        "ucnv_cb.cpp"
        "ucnv_err.cpp"
        "ucnvlat1.cpp"
        "ucnv_u7.cpp"
        "ucnv_u8.cpp"
        "ucnv_u16.cpp"
        "ucnv_u32.cpp"
        "ucnvscsu.cpp"
        "ucnvbocu.cpp"
        "ucnv_ext.cpp"
        "ucnvmbcs.cpp"
        "ucnv2022.cpp"
        "ucnvhz.cpp"
        "ucnv_lmb.cpp"
        "ucnvisci.cpp"
        "ucnvdisp.cpp"
        "ucnv_set.cpp"
        "ucnv_ct.cpp"
        "resource.cpp"
        "uresbund.cpp"
        "ures_cnv.cpp"
        "uresdata.cpp"
        "resbund.cpp"
        "resbund_cnv.cpp"
        "ucurr.cpp"
        "localebuilder.cpp"
        "localeprioritylist.cpp"
        "messagepattern.cpp"
        "ucat.cpp"
        "locmap.cpp"
        "uloc.cpp"
        "locid.cpp"
        "locutil.cpp"
        "locavailable.cpp"
        "locdispnames.cpp"
        "locdspnm.cpp"
        "loclikely.cpp"
        "locresdata.cpp"
        "lsr.cpp"
        "loclikelysubtags.cpp"
        "locdistance.cpp"
        "localematcher.cpp"
        "bytestream.cpp"
        "stringpiece.cpp"
        "bytesinkutil.cpp"
        "stringtriebuilder.cpp"
        "bytestriebuilder.cpp"
        "bytestrie.cpp"
        "bytestrieiterator.cpp"
        "ucharstrie.cpp"
        "ucharstriebuilder.cpp"
        "ucharstrieiterator.cpp"
        "dictionarydata.cpp"
        "edits.cpp"
        "appendable.cpp"
        "ustr_cnv.cpp"
        "unistr_cnv.cpp"
        "unistr.cpp"
        "unistr_case.cpp"
        "unistr_props.cpp"
        "utf_impl.cpp"
        "ustring.cpp"
        "ustrcase.cpp"
        "ucasemap.cpp"
        "ucasemap_titlecase_brkiter.cpp"
        "cstring.cpp"
        "ustrfmt.cpp"
        "ustrtrns.cpp"
        "ustr_wcs.cpp"
        "utext.cpp"
        "unistr_case_locale.cpp"
        "ustrcase_locale.cpp"
        "unistr_titlecase_brkiter.cpp"
        "ustr_titlecase_brkiter.cpp"
        "normalizer2impl.cpp"
        "normalizer2.cpp"
        "filterednormalizer2.cpp"
        "normlzr.cpp"
        "unorm.cpp"
        "unormcmp.cpp"
        "loadednormalizer2impl.cpp"
        "chariter.cpp"
        "schriter.cpp"
        "uchriter.cpp"
        "uiter.cpp"
        "patternprops.cpp"
        "uchar.cpp"
        "uprops.cpp"
        "ucase.cpp"
        "propname.cpp"
        "ubidi_props.cpp"
        "characterproperties.cpp"
        #"ubidi.cpp"
        #"ubidiwrt.cpp"
        #"ubidiln.cpp"
        "ushape.cpp"
        "uscript.cpp"
        "uscript_props.cpp"
        "usc_impl.cpp"
        "unames.cpp"
        "utrie.cpp"
        "utrie2.cpp"
        "utrie2_builder.cpp"
        "ucptrie.cpp"
        "umutablecptrie.cpp"
        "bmpset.cpp"
        "unisetspan.cpp"
        "uset_props.cpp"
        "uniset_props.cpp"
        "uniset_closure.cpp"
        "uset.cpp"
        "uniset.cpp"
        "usetiter.cpp"
        "ruleiter.cpp"
        "caniter.cpp"
        "unifilt.cpp"
        "unifunct.cpp"
        "uarrsort.cpp"
        "brkiter.cpp"
        "ubrk.cpp"
        "brkeng.cpp"
        "dictbe.cpp"
        "filteredbrk.cpp"
        "rbbi.cpp"
        "rbbidata.cpp"
        "rbbinode.cpp"
        "rbbirb.cpp"
        "rbbiscan.cpp"
        "rbbisetb.cpp"
        "rbbistbl.cpp"
        "rbbitblb.cpp"
        "rbbi_cache.cpp"
        "serv.cpp"
        "servnotf.cpp"
        "servls.cpp"
        "servlk.cpp"
        "servlkf.cpp"
        "servrbf.cpp"
        "servslkf.cpp"
        "uidna.cpp"
        "usprep.cpp"
        "uts46.cpp"
        "punycode.cpp"
        "util.cpp"
        "util_props.cpp"
        "parsepos.cpp"
        "locbased.cpp"
        "cwchar.cpp"
        "wintz.cpp"
        "dtintrv.cpp"
        "ucnvsel.cpp"
        "propsvec.cpp"
        "ulist.cpp"
        "uloc_tag.cpp"
        "icudataver.cpp"
        "icuplug.cpp"
        "sharedobject.cpp"
        "simpleformatter.cpp"
        "unifiedcache.cpp"
        "uloc_keytype.cpp"
        #"ubiditransform.cpp"
        "pluralmap.cpp"
        "static_unicode_sets.cpp"
        "restrace.cpp"
        )
    _dnicu_pfx_files(i18n-files "${icu-source-path}/i18n"
        "ucln_in.cpp"
        "fmtable.cpp"
        "format.cpp"
        "msgfmt.cpp"
        "umsg.cpp"
        "numfmt.cpp"
        "unum.cpp"
        "decimfmt.cpp"
        "dcfmtsym.cpp"
        "fmtable_cnv.cpp"
        "choicfmt.cpp"
        "datefmt.cpp"
        "smpdtfmt.cpp"
        "reldtfmt.cpp"
        "dtfmtsym.cpp"
        "udat.cpp"
        "dtptngen.cpp"
        "udatpg.cpp"
        "nfrs.cpp"
        "nfrule.cpp"
        "nfsubs.cpp"
        "rbnf.cpp"
        "numsys.cpp"
        "unumsys.cpp"
        "ucsdet.cpp"
        "ucal.cpp"
        "calendar.cpp"
        "gregocal.cpp"
        "timezone.cpp"
        "simpletz.cpp"
        "olsontz.cpp"
        "astro.cpp"
        "taiwncal.cpp"
        "buddhcal.cpp"
        "persncal.cpp"
        "islamcal.cpp"
        "japancal.cpp"
        "gregoimp.cpp"
        "hebrwcal.cpp"
        "indiancal.cpp"
        "chnsecal.cpp"
        "cecal.cpp"
        "coptccal.cpp"
        "dangical.cpp"
        "ethpccal.cpp"
        "coleitr.cpp"
        "coll.cpp"
        "sortkey.cpp"
        "bocsu.cpp"
        "ucoleitr.cpp"
        "ucol.cpp"
        "ucol_res.cpp"
        "ucol_sit.cpp"
        "collation.cpp"
        "collationsettings.cpp"
        "collationdata.cpp"
        "collationtailoring.cpp"
        "collationdatareader.cpp"
        "collationdatawriter.cpp"
        "collationfcd.cpp"
        "collationiterator.cpp"
        "utf16collationiterator.cpp"
        "utf8collationiterator.cpp"
        "uitercollationiterator.cpp"
        "collationsets.cpp"
        "collationcompare.cpp"
        "collationfastlatin.cpp"
        "collationkeys.cpp"
        "rulebasedcollator.cpp"
        "collationroot.cpp"
        "collationrootelements.cpp"
        "collationdatabuilder.cpp"
        "collationweights.cpp"
        "collationruleparser.cpp"
        "collationbuilder.cpp"
        "collationfastlatinbuilder.cpp"
        "listformatter.cpp"
        "ulistformatter.cpp"
        "strmatch.cpp"
        "usearch.cpp"
        "search.cpp"
        "stsearch.cpp"
        "translit.cpp"
        "utrans.cpp"
        "esctrn.cpp"
        "unesctrn.cpp"
        "funcrepl.cpp"
        "strrepl.cpp"
        "tridpars.cpp"
        "cpdtrans.cpp"
        "rbt.cpp"
        "rbt_data.cpp"
        "rbt_pars.cpp"
        "rbt_rule.cpp"
        "rbt_set.cpp"
        "nultrans.cpp"
        "remtrans.cpp"
        "casetrn.cpp"
        "titletrn.cpp"
        "tolowtrn.cpp"
        "toupptrn.cpp"
        "anytrans.cpp"
        "name2uni.cpp"
        "uni2name.cpp"
        "nortrans.cpp"
        "quant.cpp"
        "transreg.cpp"
        "brktrans.cpp"
        "regexcmp.cpp"
        "rematch.cpp"
        "repattrn.cpp"
        "regexst.cpp"
        "regextxt.cpp"
        "regeximp.cpp"
        "uregex.cpp"
        "uregexc.cpp"
        "ulocdata.cpp"
        "measfmt.cpp"
        "currfmt.cpp"
        "curramt.cpp"
        "currunit.cpp"
        "measure.cpp"
        "utmscale.cpp"
        "csdetect.cpp"
        "csmatch.cpp"
        "csr2022.cpp"
        "csrecog.cpp"
        "csrmbcs.cpp"
        "csrsbcs.cpp"
        "csrucode.cpp"
        "csrutf8.cpp"
        "inputext.cpp"
        "wintzimpl.cpp"
        "windtfmt.cpp"
        "winnmfmt.cpp"
        "basictz.cpp"
        "dtrule.cpp"
        "rbtz.cpp"
        "tzrule.cpp"
        "tztrans.cpp"
        "vtzone.cpp"
        "zonemeta.cpp"
        "standardplural.cpp"
        "upluralrules.cpp"
        "plurrule.cpp"
        "plurfmt.cpp"
        "selfmt.cpp"
        "dtitvfmt.cpp"
        "dtitvinf.cpp"
        "udateintervalformat.cpp"
        "tmunit.cpp"
        "tmutamt.cpp"
        "tmutfmt.cpp"
        "currpinf.cpp"
        "uspoof.cpp"
        "uspoof_impl.cpp"
        "uspoof_build.cpp"
        "uspoof_conf.cpp"
        "smpdtfst.cpp"
        "ztrans.cpp"
        "zrule.cpp"
        "vzone.cpp"
        "fphdlimp.cpp"
        "fpositer.cpp"
        "ufieldpositer.cpp"
        "decNumber.cpp"
        "decContext.cpp"
        "alphaindex.cpp"
        "tznames.cpp"
        "tznames_impl.cpp"
        "tzgnames.cpp"
        "tzfmt.cpp"
        "compactdecimalformat.cpp"
        "gender.cpp"
        "region.cpp"
        "scriptset.cpp"
        "uregion.cpp"
        "reldatefmt.cpp"
        "quantityformatter.cpp"
        "measunit.cpp"
        "measunit_extra.cpp"
        "sharedbreakiterator.cpp"
        "scientificnumberformatter.cpp"
        "dayperiodrules.cpp"
        "nounit.cpp"
        "number_affixutils.cpp"
        "number_compact.cpp"
        "number_decimalquantity.cpp"
        "number_decimfmtprops.cpp"
        "number_fluent.cpp"
        "number_formatimpl.cpp"
        "number_grouping.cpp"
        "number_integerwidth.cpp"
        "number_longnames.cpp"
        "number_modifiers.cpp"
        "number_notation.cpp"
        "number_output.cpp"
        "number_padding.cpp"
        "number_patternmodifier.cpp"
        "number_patternstring.cpp"
        "number_rounding.cpp"
        "number_scientific.cpp"
        "number_utils.cpp"
        "number_asformat.cpp"
        "number_mapper.cpp"
        "number_multiplier.cpp"
        "number_currencysymbols.cpp"
        "number_skeletons.cpp"
        "number_capi.cpp"
        "double-conversion-string-to-double.cpp"
        "double-conversion-double-to-string.cpp"
        "double-conversion-bignum-dtoa.cpp"
        "double-conversion-bignum.cpp"
        "double-conversion-cached-powers.cpp"
        "double-conversion-fast-dtoa.cpp"
        "double-conversion-strtod.cpp"
        "string_segment.cpp"
        "numparse_parsednumber.cpp"
        "numparse_impl.cpp"
        "numparse_symbols.cpp"
        "numparse_decimal.cpp"
        "numparse_scientific.cpp"
        "numparse_currency.cpp"
        "numparse_affixes.cpp"
        "numparse_compositions.cpp"
        "numparse_validators.cpp"
        "numrange_fluent.cpp"
        "numrange_impl.cpp"
        "erarules.cpp"
        "formattedvalue.cpp"
        "formattedval_iterimpl.cpp"
        "formattedval_sbimpl.cpp"
        "formatted_string_builder.cpp"
        )
    target_sources("${targetname}" PRIVATE ${common-files} ${i18n-files})
    target_include_directories("${targetname}" SYSTEM PRIVATE "${icu-source-path}/common" "${icu-source-path}/i18n")
    target_compile_definitions("${targetname}" PRIVATE "U_COMMON_IMPLEMENTATION" "U_I18N_IMPLEMENTATION")
    target_compile_options("${targetname}" PRIVATE
        "-std=c++11"
        "-fno-exceptions"
        "-fno-asynchronous-unwind-tables"
        "-fno-unwind-tables"

        "-ffunction-sections"
        "-fdata-sections"

        #"-flto=full"
        #"-fstrict-vtable-pointers"
        #"-fwhole-program-vtables"
        ##"-fforce-emit-vtables"
        #"-fvirtual-function-elimination"

        "-fvisibility=hidden"
        "-fno-plt"
        "-Oz"
        "-g"
        #"-fno-semantic-interposition"
        )
    target_link_options("${targetname}" PRIVATE
        #"-Wl,--icf=all"
        )
    set_property(TARGET "${targetname}" PROPERTY CXX_STANDARD 11)
endfunction()
_def_icuuc()

function(_def_minitest)
    set(name "minitest")
    add_executable("${name}")
    target_sources("${name}" PRIVATE "minitest.cpp")
    target_include_directories("${name}" SYSTEM PRIVATE "${icu-source-path}/common" "${icu-source-path}/i18n")
    target_compile_options("${name}" PRIVATE
        "-std=c++11"
        "-fno-exceptions"
        "-fno-asynchronous-unwind-tables"
        "-fno-unwind-tables"

        "-ffunction-sections"
        "-fdata-sections"

        #"-flto=full"
        #"-fstrict-vtable-pointers"
        #"-fwhole-program-vtables"
        ##"-fforce-emit-vtables"
        #"-fvirtual-function-elimination"

        "-fvisibility=hidden"
        "-fno-plt"
        "-Oz"
        #"-fno-semantic-interposition"
        "-g"
        )
    target_link_libraries("${name}" PRIVATE
        "icuuc"
        ${CMAKE_DL_LIBS}
        )
    target_link_options("${name}" PRIVATE
        #"-flto=full"
        #"-Wl,--gc-sections"
        "-Wl,-dead_strip"
        #"-Wl,--icf=all"
        #"-Wl,--lto-O2"
        #"-Wl,--build-id=0x0101010101010101"
        )
    handle_debuginfo("${name}")
endfunction()
_def_minitest()
